package client

import (
	"encoding/json"
	"errors"
	"github.com/LloydLabs/go-malwarebazaar/api"
	"net/url"
	"strconv"
)

func (b *Bazaar) QueryGeneric(data url.Values) (api.QueryResponse, error) {
	var resp api.QueryResponse
	r, err := b.Client.Request(data)
	if err != nil {
		return resp, errors.New("failed to request the query")
	}

	if err = json.NewDecoder(r.Body).Decode(&resp); err != nil {
		return resp, errors.New("failed to unmarshal the response body")
	}

	if resp.QueryStatus != "ok" {
		return resp, errors.New("query endpoint failed with error")
	}

	return resp, nil
}

func (b *Bazaar) QueryTag(tag string, limit int) (api.QueryResponse, error) {
	if len(tag) == 0 || (limit <= 0 || limit > 1000) {
		return api.QueryResponse{}, errors.New("invalid query parameters")
	}

	data := url.Values{
		"query": {api.QueryTag},
		"tag":   {tag},
		"limit": {strconv.Itoa(limit)},
	}

	return b.QueryGeneric(data)
}

func (b *Bazaar) QueryRecent(amount int) (api.QueryResponse, error) {
	data := url.Values{
		"query":    {api.QueryLatest},
		"selector": {strconv.Itoa(amount)},
	}

	return b.QueryGeneric(data)
}

func (b *Bazaar) QueryHash(hash string) (api.QueryResponse, error) {
	if len(hash) != 64 && len(hash) != 32 && len(hash) != 128 {
		return api.QueryResponse{}, errors.New("the hash must be SHA-256, SHA-1, or MD5")
	}

	data := url.Values{
		"query": {api.QueryHash},
		"hash":  {hash},
	}

	return b.QueryGeneric(data)
}

func (b *Bazaar) QueryYara(rule string, limit int) (api.QueryResponse, error) {
	if len(rule) == 0 {
		return api.QueryResponse{}, errors.New("provide a YARA rule to query")
	}

	if limit < 100 {
		limit = 100
	}

	data := url.Values{
		"query":     {api.QueryYara},
		"yara_rule": {rule},
		"limit":     {strconv.Itoa(limit)},
	}

	return b.QueryGeneric(data)
}

func (b *Bazaar) QuerySignature(signature string, limit int) (api.QueryResponse, error) {
	if len(signature) == 0 {
		return api.QueryResponse{}, errors.New("provide a signature to query")
	}

	if limit < 100 {
		limit = 100
	}

	data := url.Values{
		"query":     {api.QueryYara},
		"signature": {signature},
		"limit":     {strconv.Itoa(limit)},
	}

	return b.QueryGeneric(data)
}
