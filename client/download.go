package client

import (
	"bytes"
	"encoding/json"
	"errors"
	"github.com/LloydLabs/go-malwarebazaar/api"
	"github.com/alexmullins/zip"
	"io/ioutil"
	"net/url"
)

const (
	ZipPassword = "infected"
)

func (b *Bazaar) DownloadFile(hash string) (out []byte, err error) {
	if len(hash) != 64 {
		return out, errors.New("the hash must be SHA-256")
	}

	data := url.Values{
		"query":       {api.DownloadFile},
		"sha256_hash": {hash},
	}

	r, err := b.Client.Request(data)
	if err != nil {
		return out, err
	}

	hashData, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return out, err
	}

	if r.Header.Get("Content-Type") == "application/json" {
		var resp api.GenericResponse
		if err = json.NewDecoder(r.Body).Decode(&resp); err == nil {
			if message, ok := api.ErrorTypes[resp.QueryStatus]; ok {
				return out, errors.New(message)
			}

			return out, errors.New("unknown error occurred")
		}
	}

	if r.Header.Get("Content-Type") != "application/zip" {
		return out, errors.New("invalid content-type returned, failed to recognise header")
	}

	reader := bytes.NewReader(hashData)
	archive, err := zip.NewReader(reader, int64(len(hashData)))
	if err != nil {
		return out, err
	}

	if len(archive.File) != 1 {
		return out, errors.New("the file does not exist within the archive")
	}

	if zipFile := archive.File[0]; zipFile.IsEncrypted() {
		zipFile.SetPassword(ZipPassword)

		f, err := zipFile.Open()
		if err != nil {
			return out, err
		}

		defer f.Close()

		out, err = ioutil.ReadAll(f)
		if err != nil {
			return out, err
		}
	}

	return out, nil
}
